13e229e2
6
-There is a lot of unused code that bloats the codebase making it less
accessible.
-The main file does not give an reasonable overview over how the code works.
Furthermore the top level functions are extremly large and not very descriptive.
-The overall architecture of the code is not very apperent.
-The masterbackup module appears to handle everything related to the master, in a
file called master.go, however there is also a module called nodes which
includes another file called master.go which also appears to handle the master.
-The tracability of the modules are not easy to follow.
-The code for the elevators statemachine is ok, we can see the underlying
structure, however it should be tidied up.
-The comments in the code are usefull, however there could be more. 

39cc8ca4
7
-Way to long functions. The syncer, and fsm modules that contains the logic of
the program is only one function each. They should both be divided into smaller
function to get better reababillity.
-Way to much nested code.
-There is a lot of bad variable names, and unnesesary abreviations that makes
-The syncer has so bad variable names, and nested code that we gave up trying to
understand how it works. 
the code quite hard to read.
-The code for the HRA is missing, it looks like there is supposed to be a
module, hall_request_assigner that are not present. Functionalty from this
modules is used quite a few times. 
-It looks like it is just dumped much code into a module called system_types.
Most of the code in that module does not belong under such a module, and it only
makes the code hard to read, when code from that module is used. It should 
be seperatet into its own module.
-The underlying functionality of the code is apperent, but hard to find. However
we belive that this is possible to fix with enough time and effort.

88c00dc1
9
-The code is good structured, and uses very descriptive variable- and function
names.
-The overall architecture is very apperent, it is easy to find where the different
key components of the project are defined, and find out how they connect.
-The Sherrif-wranger instead of master-slave is very funny and creative. It is
for the most part descriptive, however mabye not so proffesional, especially
with the debug messeages.
-There is used a lot of gorutines that are started at different placeses. There
is nothing wrong with gorutines, however too many could make it hard to keep
track of what is running, and hard to debug, which may be the case here.
-The code are sepereated into logical modules, where each module deal with one
spesific task. This is good.
-The code could benefittet from some comments, especially when doing something
that is not immediately clear.

edd5b71e
7+
-I dont like so much code in the main function. As it is now all logic is in the
main function. Main should act as a entry point for all the key components in
the system, and show how they communicate.
-The different things in the main file should be seperated into its own
modules. This would make the code more coherant, and easier to understand and debug.
This is especially true for the elevator stuff and the networking stuff, that
should be untangled from eachoter.
-Despite this the logic of the code is good, and makes sense after you have had
enough time to trace everything.
-The naming is for the most part descent, however sometimes it is sligthly
confusing. For example elevator_client that has is_master variable (It does not make
sense for a master to be a client). Or handler, which handles what??
-The overall architecture is not immediately clear. It is clear that it is used
a master-slave architecture, but it is not clear what the slave does and what the
master does. Futhermore it is not clear who is the slave and who is the master,
and where backup comes in the picture.
-There is some comments, but there could be more. especially when doing
something that is not immediately clear.
-

